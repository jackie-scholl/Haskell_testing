# 16: Functor

## 16.4 Let’s talk about 𝑓, baby

### Exercises: Be Kind

1. *
2. * -> *, I wanna say * -> * but that feels wrong? `
3. * -> * -> *

## 16.7 Commonly used functors

### Exercises: Heavy Lifting

1. a = fmap (+1) $ read "[1]" :: [Int]
2. b = (fmap . fmap) (++ "lol") (Just ["Hi,", "Hello"])
3. c = fmap (*2) (\x -> x - 2)
4. d = fmap ((return '1' ++) . show) (\x -> [x, 1..3])
5.
e :: IO Integer
e = let ioi = readIO "1" :: IO Integer
        changed = (read . ("123"++) . show) ioi
    in fmap (*3) changed

idk, I can't figure this out

## 16.10 Exercises: Instances of Func

1.
newtype Identity a = Identity a
instance Functor Identity where
    fmap f (Identity a) = Identity (f a)

2.
data Pair a = Pair a a
instance Functor Pair where
    fmap f (Pair x y) = Pair x (f y)




