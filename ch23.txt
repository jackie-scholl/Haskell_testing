# Chapter 23: State

## 23.5: Throw Down

### Exercises: Roll Your Own

1. 
rollsToGetN :: Int -> StdGen -> Int
rollsToGetN n g = go 0 0 g
    where
        go :: Int -> Int -> StdGen -> Int
        go sum count gen
            | sum >= n = count
            | otherwise =
                let (die, nextGen) = randomR (1, 6) gen
                in go (sum + die) (count + 1) nextGen

           
2.
rollsCountLogged' :: Int -> StdGen -> (Int, [Die])
rollsCountLogged' n g =
    let xs = go [] g
    in (length xs, intToDie <$> xs)
    where
        go :: [Int] -> StdGen -> [Int]
        go log gen
            | sum log >= n = log
            | otherwise =
                let (die, nextGen) = randomR (1, 6) gen
                in go (log ++ [die]) nextGen                

## 23.6: Write State Yourself

newtype Moi s a =
    Moi { runMoi :: s -> (a, s) }

instance Functor (Moi s) where
    -- fmap :: (a -> b) -> Moi s a -> Moi s b
    fmap f (Moi g) = Moi (\s -> (f $ fst $ g s, snd $ g s))


-- I'm not quite convinced this is a valid Applicative, I should check it at some point
instance Applicative (Moi s) where
    --pure :: a -> Moi s a
    pure a = Moi (\s -> (a, s))

    -- (<*>) :: Moi s (a -> b) -> Moi s a -> Moi s b
    (Moi f) <*> (Moi g) = Moi (\s -> ((fst $ f s) $ fst $ g s, snd $ g s ))


instance Monad (Moi s) where
    return = pure
    
    {- (>>=) :: Moi s a
        -> (a -> Moi s b)
        -> Moi s b -}
    (Moi f) >>= g =
        Moi h
        where h s = (runMoi $ g $ fst $ f s) $ snd $ f s
        

## 23.8 Chapter exercises

1. get :: Moi s s
   get = Moi (\s -> (s, s))

2. put :: s -> Moi s ()
   put x = Moi (\s -> ((), x))

3. exec :: Moi s a -> s -> s
   exec (Moi sa) s = snd $ sa s

4. eval :: Moi s a -> s -> a
   eval (Moi sa) = fst . sa

5. modify :: (s -> s) -> Moi s ()
   modify f = Moi (\s -> ((), f s))

-- all checked against given examples


